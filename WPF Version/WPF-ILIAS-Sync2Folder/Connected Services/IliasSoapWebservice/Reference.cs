//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPF_ILIAS_Sync2Folder.IliasSoapWebservice {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:ilUserAdministration", ConfigurationName="IliasSoapWebservice.ILIASSoapWebservicePortType")]
    public interface ILIASSoapWebservicePortType {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="sid")]
        string login(string client, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#login", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="sid")]
        System.Threading.Tasks.Task<string> loginAsync(string client, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#loginCAS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="sid")]
        string loginCAS(string client, string PT, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#loginCAS", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="sid")]
        System.Threading.Tasks.Task<string> loginCASAsync(string client, string PT, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="sid")]
        string loginLDAP(string client, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#login", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="sid")]
        System.Threading.Tasks.Task<string> loginLDAPAsync(string client, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#loginStudipUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        WPF_ILIAS_Sync2Folder.IliasSoapWebservice.loginStudipUserResponse loginStudipUser(WPF_ILIAS_Sync2Folder.IliasSoapWebservice.loginStudipUserRequest request);
        
        // CODEGEN: Der Nachrichtenvertrag wird generiert, da der Vorgang mehrere Rückgabewerte aufweist.
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#loginStudipUser", ReplyAction="*")]
        System.Threading.Tasks.Task<WPF_ILIAS_Sync2Folder.IliasSoapWebservice.loginStudipUserResponse> loginStudipUserAsync(WPF_ILIAS_Sync2Folder.IliasSoapWebservice.loginStudipUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#logout", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool logout(string sid);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#logout", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> logoutAsync(string sid);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#lookupUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="usr_id")]
        int lookupUser(string sid, string user_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#lookupUser", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="usr_id")]
        System.Threading.Tasks.Task<int> lookupUserAsync(string sid, string user_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="user_data")]
        WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ilUserData getUser(string sid, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getUser", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="user_data")]
        System.Threading.Tasks.Task<WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ilUserData> getUserAsync(string sid, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#deleteUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool deleteUser(string sid, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#deleteUser", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> deleteUserAsync(string sid, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#addCourse", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="course_id")]
        int addCourse(string sid, int target_id, string crs_xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#addCourse", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="course_id")]
        System.Threading.Tasks.Task<int> addCourseAsync(string sid, int target_id, string crs_xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#deleteCourse", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool deleteCourse(string sid, int course_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#deleteCourse", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> deleteCourseAsync(string sid, int course_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#assignCourseMember", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool assignCourseMember(string sid, int course_id, int user_id, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#assignCourseMember", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> assignCourseMemberAsync(string sid, int course_id, int user_id, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#excludeCourseMember", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool excludeCourseMember(string sid, int course_id, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#excludeCourseMember", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> excludeCourseMemberAsync(string sid, int course_id, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#isAssignedToCourse", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="role")]
        int isAssignedToCourse(string sid, int course_id, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#isAssignedToCourse", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="role")]
        System.Threading.Tasks.Task<int> isAssignedToCourseAsync(string sid, int course_id, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getCourseXML", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        string getCourseXML(string sid, int course_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getCourseXML", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        System.Threading.Tasks.Task<string> getCourseXMLAsync(string sid, int course_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#updateCourse", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool updateCourse(string sid, int course_id, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#updateCourse", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> updateCourseAsync(string sid, int course_id, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getCourseIdByImportId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="obj_id")]
        int getObjIdByImportId(string sid, string import_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getCourseIdByImportId", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="obj_id")]
        System.Threading.Tasks.Task<int> getObjIdByImportIdAsync(string sid, string import_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getRefIdsByImportId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ref_ids")]
        int[] getRefIdsByImportId(string sid, string import_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getRefIdsByImportId", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ref_ids")]
        System.Threading.Tasks.Task<int[]> getRefIdsByImportIdAsync(string sid, string import_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getRefIdsByObjId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ref_ids")]
        int[] getRefIdsByObjId(string sid, string obj_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getRefIdsByObjId", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ref_ids")]
        System.Threading.Tasks.Task<int[]> getRefIdsByObjIdAsync(string sid, string obj_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getObjectByReference", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="object_xml")]
        string getObjectByReference(string sid, int reference_id, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getObjectByReference", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="object_xml")]
        System.Threading.Tasks.Task<string> getObjectByReferenceAsync(string sid, int reference_id, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getObjectsByTitle", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="object_xml")]
        string getObjectsByTitle(string sid, string title, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getObjectsByTitle", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="object_xml")]
        System.Threading.Tasks.Task<string> getObjectsByTitleAsync(string sid, string title, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#searchObjects", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="object_xml")]
        string searchObjects(string sid, string[] types, string key, string combination, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#searchObjects", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="object_xml")]
        System.Threading.Tasks.Task<string> searchObjectsAsync(string sid, string[] types, string key, string combination, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getTreeChilds", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="object_xml")]
        string getTreeChilds(string sid, int ref_id, string[] types, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getTreeChilds", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="object_xml")]
        System.Threading.Tasks.Task<string> getTreeChildsAsync(string sid, int ref_id, string[] types, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getXMLTree", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="object_xml")]
        string getXMLTree(string sid, int ref_id, string[] types, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getXMLTree", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="object_xml")]
        System.Threading.Tasks.Task<string> getXMLTreeAsync(string sid, int ref_id, string[] types, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#addObject", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ref_id")]
        int addObject(string sid, int target_id, string object_xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#addObject", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ref_id")]
        System.Threading.Tasks.Task<int> addObjectAsync(string sid, int target_id, string object_xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#updateObjects", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool updateObjects(string sid, string object_xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#updateObjects", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> updateObjectsAsync(string sid, string object_xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#addReference", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ref_id")]
        int addReference(string sid, int source_id, int target_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#addReference", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ref_id")]
        System.Threading.Tasks.Task<int> addReferenceAsync(string sid, int source_id, int target_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#deleteObject", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool deleteObject(string sid, int reference_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#deleteObject", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> deleteObjectAsync(string sid, int reference_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#removeFromSystemByImportId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool removeFromSystemByImportId(string sid, string import_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#removeFromSystemByImportId", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> removeFromSystemByImportIdAsync(string sid, string import_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#addUserRoleEntry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool addUserRoleEntry(string sid, int user_id, int role_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#addUserRoleEntry", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> addUserRoleEntryAsync(string sid, int user_id, int role_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#deleteUserRoleEntry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool deleteUserRoleEntry(string sid, int user_id, int role_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#deleteUserRoleEntry", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> deleteUserRoleEntryAsync(string sid, int user_id, int role_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getOperations", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="operations")]
        WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ilOperation[] getOperations(string sid);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getOperations", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="operations")]
        System.Threading.Tasks.Task<WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ilOperation[]> getOperationsAsync(string sid);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#revokePermissions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool revokePermissions(string sid, int ref_id, int role_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#revokePermissions", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> revokePermissionsAsync(string sid, int ref_id, int role_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#grantPermissions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool grantPermissions(string sid, int ref_id, int role_id, int[] operations);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#grantPermissions", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> grantPermissionsAsync(string sid, int ref_id, int role_id, int[] operations);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getLocalRoles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="role_xml")]
        string getLocalRoles(string sid, int ref_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getLocalRoles", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="role_xml")]
        System.Threading.Tasks.Task<string> getLocalRolesAsync(string sid, int ref_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getLocalRoles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="role_xml")]
        string getUserRoles(string sid, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getLocalRoles", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="role_xml")]
        System.Threading.Tasks.Task<string> getUserRolesAsync(string sid, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#addRole", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="role_ids")]
        int[] addRole(string sid, int target_id, string obj_xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#addRole", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="role_ids")]
        System.Threading.Tasks.Task<int[]> addRoleAsync(string sid, int target_id, string obj_xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#deleteRole", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool deleteRole(string sid, int role_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#deleteRole", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> deleteRoleAsync(string sid, int role_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#addRole", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="role_ids")]
        int[] addRoleFromTemplate(string sid, int target_id, string obj_xml, int role_template_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#addRole", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="role_ids")]
        System.Threading.Tasks.Task<int[]> addRoleFromTemplateAsync(string sid, int target_id, string obj_xml, int role_template_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getPermissionsForObject", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="operations")]
        WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ilOperation[] getObjectTreeOperations(string sid, int ref_id, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getPermissionsForObject", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="operations")]
        System.Threading.Tasks.Task<WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ilOperation[]> getObjectTreeOperationsAsync(string sid, int ref_id, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#addGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ref_id")]
        int addGroup(string sid, int target_id, string group_xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#addGroup", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ref_id")]
        System.Threading.Tasks.Task<int> addGroupAsync(string sid, int target_id, string group_xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#groupExists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="exists")]
        bool groupExists(string sid, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#groupExists", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="exists")]
        System.Threading.Tasks.Task<bool> groupExistsAsync(string sid, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="group_xml")]
        string getGroup(string sid, int ref_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getGroup", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="group_xml")]
        System.Threading.Tasks.Task<string> getGroupAsync(string sid, int ref_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#assignGroupMember", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool assignGroupMember(string sid, int group_id, int user_id, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#assignGroupMember", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> assignGroupMemberAsync(string sid, int group_id, int user_id, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#excludeGroupMember", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool excludeGroupMember(string sid, int group_id, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#excludeGroupMember", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> excludeGroupMemberAsync(string sid, int group_id, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#isAssignedToGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="role")]
        int isAssignedToGroup(string sid, int group_id, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#isAssignedToGroup", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="role")]
        System.Threading.Tasks.Task<int> isAssignedToGroupAsync(string sid, int group_id, int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#sendMail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        bool sendMail(string sid, string rcp_to, string rcp_cc, string rcp_bcc, string sender, string subject, string message, string attachments);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#sendMail", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        System.Threading.Tasks.Task<bool> sendMailAsync(string sid, string rcp_to, string rcp_cc, string rcp_bcc, string sender, string subject, string message, string attachments);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#sendMail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        bool distributeMails(string sid, string mail_xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#sendMail", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        System.Threading.Tasks.Task<bool> distributeMailsAsync(string sid, string mail_xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#ilClone", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="new_ref_id")]
        int ilClone(string sid, int copy_identifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#ilClone", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="new_ref_id")]
        System.Threading.Tasks.Task<int> ilCloneAsync(string sid, int copy_identifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#handleECSTasks", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool handleECSTasks(string sid, int server_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#handleECSTasks", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> handleECSTasksAsync(string sid, int server_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#ilCloneDependencies", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool ilCloneDependencies(string sid, int copy_identifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#ilCloneDependencies", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> ilCloneDependenciesAsync(string sid, int copy_identifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#saveQuestionResult", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        bool saveQuestionResult(string sid, int user_id, int test_id, int question_id, int pass, string[] solution);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#saveQuestionResult", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        System.Threading.Tasks.Task<bool> saveQuestionResultAsync(string sid, int user_id, int test_id, int question_id, int pass, string[] solution);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#saveQuestion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        bool saveQuestion(string sid, long active_id, long question_id, int pass, string[] solution);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#saveQuestion", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        System.Threading.Tasks.Task<bool> saveQuestionAsync(string sid, long active_id, long question_id, int pass, string[] solution);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#saveQuestionSolution", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        string saveQuestionSolution(string sid, long active_id, long question_id, int pass, string solution);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#saveQuestionSolution", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        System.Threading.Tasks.Task<string> saveQuestionSolutionAsync(string sid, long active_id, long question_id, int pass, string solution);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getQuestionSolution", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="solution")]
        string[] getQuestionSolution(string sid, long active_id, int question_id, int pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getQuestionSolution", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="solution")]
        System.Threading.Tasks.Task<string[]> getQuestionSolutionAsync(string sid, long active_id, int question_id, int pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getTestUserData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="userdata")]
        string[] getTestUserData(string sid, long active_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getTestUserData", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="userdata")]
        System.Threading.Tasks.Task<string[]> getTestUserDataAsync(string sid, long active_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getPositionOfQuestion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="position")]
        int getPositionOfQuestion(string sid, long active_id, int question_id, int pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getPositionOfQuestion", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="position")]
        System.Threading.Tasks.Task<int> getPositionOfQuestionAsync(string sid, long active_id, int question_id, int pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getPreviousReachedPoints", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="position")]
        double[] getPreviousReachedPoints(string sid, long active_id, int question_id, int pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getPreviousReachedPoints", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="position")]
        System.Threading.Tasks.Task<double[]> getPreviousReachedPointsAsync(string sid, long active_id, int question_id, int pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getNrOfQuestionsInPass", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="count")]
        int getNrOfQuestionsInPass(string sid, long active_id, int pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getNrOfQuestionsInPass", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="count")]
        System.Threading.Tasks.Task<int> getNrOfQuestionsInPassAsync(string sid, long active_id, int pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getStructureObjects", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        string getStructureObjects(string sid, int ref_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getStructureObjects", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        System.Threading.Tasks.Task<string> getStructureObjectsAsync(string sid, int ref_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#importUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="protocol")]
        string importUsers(string sid, int folder_id, string usr_xml, int conflict_rule, int send_account_mail);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#importUsers", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="protocol")]
        System.Threading.Tasks.Task<string> importUsersAsync(string sid, int folder_id, string usr_xml, int conflict_rule, int send_account_mail);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getRoles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="role_xml")]
        string getRoles(string sid, string role_type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getRoles", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="role_xml")]
        System.Threading.Tasks.Task<string> getRolesAsync(string sid, string role_type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getUsersForContainer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="user_xml")]
        string getUsersForContainer(string sid, int ref_id, int attach_roles, int active);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getUsersForContainer", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="user_xml")]
        System.Threading.Tasks.Task<string> getUsersForContainerAsync(string sid, int ref_id, int attach_roles, int active);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getUsersForRole", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="user_xml")]
        string getUsersForRole(string sid, int role_id, int attach_roles, int active);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getUsersForRole", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="user_xml")]
        System.Threading.Tasks.Task<string> getUsersForRoleAsync(string sid, int role_id, int attach_roles, int active);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#searchUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="user_xml")]
        string searchUser(string sid, string[] key_fields, string query_operator, string[] key_values, int attach_roles, int active);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#searchUsers", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="user_xml")]
        System.Threading.Tasks.Task<string> searchUserAsync(string sid, string[] key_fields, string query_operator, string[] key_values, int attach_roles, int active);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#hasNewMail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        bool hasNewMail(string sid);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#hasNewMail", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        System.Threading.Tasks.Task<bool> hasNewMailAsync(string sid);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getNIC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlresultset")]
        string getNIC(string sid);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getNIC", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xmlresultset")]
        System.Threading.Tasks.Task<string> getNICAsync(string sid);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getExerciseXML", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="exercisexml")]
        string getExerciseXML(string sid, int ref_id, int attachment_mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getExerciseXML", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="exercisexml")]
        System.Threading.Tasks.Task<string> getExerciseXMLAsync(string sid, int ref_id, int attachment_mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#addExercise", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="refid")]
        int addExercise(string sid, int target_id, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#addExercise", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="refid")]
        System.Threading.Tasks.Task<int> addExerciseAsync(string sid, int target_id, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#updateExercise", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool updateExercise(string sid, int ref_id, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#updateExercise", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> updateExerciseAsync(string sid, int ref_id, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getFileXML", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="filexml")]
        string getFileXML(string sid, int ref_id, int attachment_mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getFileXML", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="filexml")]
        System.Threading.Tasks.Task<string> getFileXMLAsync(string sid, int ref_id, int attachment_mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#addFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="refid")]
        int addFile(string sid, int target_id, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#addFile", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="refid")]
        System.Threading.Tasks.Task<int> addFileAsync(string sid, int target_id, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#updateFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool updateFile(string sid, int ref_id, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#updateFile", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> updateFileAsync(string sid, int ref_id, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#resolveUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        string getUserXML(string sid, int[] user_ids, int attach_roles);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#resolveUsers", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        System.Threading.Tasks.Task<string> getUserXMLAsync(string sid, int[] user_ids, int attach_roles);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getRefIdsByImportId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="obj_ids")]
        int[] getObjIdsByRefIds(string sid, int[] ref_ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getRefIdsByImportId", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="obj_ids")]
        System.Threading.Tasks.Task<int[]> getObjIdsByRefIdsAsync(string sid, int[] ref_ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#updateGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool updateGroup(string sid, int ref_id, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#updateGroup", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> updateGroupAsync(string sid, int ref_id, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getIMSManifestXML", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        string getIMSManifestXML(string sid, int ref_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getIMSManifestXML", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        System.Threading.Tasks.Task<string> getIMSManifestXMLAsync(string sid, int ref_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#hasSCORMCertificate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool hasSCORMCertificate(string sid, int ref_id, int usr_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#hasSCORMCertificate", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> hasSCORMCertificateAsync(string sid, int ref_id, int usr_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getSCORMCompletionStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        string getSCORMCompletionStatus(string sid, int usr_id, int ref_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getSCORMCompletionStatus", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        System.Threading.Tasks.Task<string> getSCORMCompletionStatusAsync(string sid, int usr_id, int ref_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#copyObject", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        WPF_ILIAS_Sync2Folder.IliasSoapWebservice.copyObjectResponse copyObject(WPF_ILIAS_Sync2Folder.IliasSoapWebservice.copyObjectRequest request);
        
        // CODEGEN: Der Nachrichtenvertrag wird generiert, da der Vorgang mehrere Rückgabewerte aufweist.
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#copyObject", ReplyAction="*")]
        System.Threading.Tasks.Task<WPF_ILIAS_Sync2Folder.IliasSoapWebservice.copyObjectResponse> copyObjectAsync(WPF_ILIAS_Sync2Folder.IliasSoapWebservice.copyObjectRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#moveObject", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="result")]
        bool moveObject(string sid, int ref_id, int target_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#moveObject", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="result")]
        System.Threading.Tasks.Task<bool> moveObjectAsync(string sid, int ref_id, int target_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getTestResults", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        string getTestResults(string sid, int ref_id, bool sum_only);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getTestResults", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        System.Threading.Tasks.Task<string> getTestResultsAsync(string sid, int ref_id, bool sum_only);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#removeTestResults", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool removeTestResults(string sid, int ref_id, int[] user_ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#removeTestResults", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> removeTestResultsAsync(string sid, int ref_id, int[] user_ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getCoursesForUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        string getCoursesForUser(string sid, string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getCoursesForUser", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        System.Threading.Tasks.Task<string> getCoursesForUserAsync(string sid, string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getGroupsForUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        string getGroupsForUser(string sid, string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getGroupsForUser", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        System.Threading.Tasks.Task<string> getGroupsForUserAsync(string sid, string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getPathForRefId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        string getPathForRefId(string sid, int ref_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getPathForRefId", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        System.Threading.Tasks.Task<string> getPathForRefIdAsync(string sid, int ref_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#searchRoles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        string searchRoles(string sid, string key, string combination, string role_type);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#searchRoles", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        System.Threading.Tasks.Task<string> searchRolesAsync(string sid, string key, string combination, string role_type);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getInstallationInfoXML", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        string getInstallationInfoXML();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getInstallationInfoXML", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        System.Threading.Tasks.Task<string> getInstallationInfoXMLAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getClientInfoXML", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        string getClientInfoXML(string clientid);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getClientInfoXML", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="xml")]
        System.Threading.Tasks.Task<string> getClientInfoXMLAsync(string clientid);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getSkillCompletionDateForTriggerRefId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dates")]
        string getSkillCompletionDateForTriggerRefId(string sid, string user_id, string ref_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getSkillCompletionDateForTriggerRefId", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dates")]
        System.Threading.Tasks.Task<string> getSkillCompletionDateForTriggerRefIdAsync(string sid, string user_id, string ref_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#checkSkillUserCertificateForTriggerRefId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="have_certificates")]
        string checkSkillUserCertificateForTriggerRefId(string sid, string user_id, string ref_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#checkSkillUserCertificateForTriggerRefId", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="have_certificates")]
        System.Threading.Tasks.Task<string> checkSkillUserCertificateForTriggerRefIdAsync(string sid, string user_id, string ref_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getSkillTriggerOfAllCertificates", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="certificate_triggers")]
        string getSkillTriggerOfAllCertificates(string sid, string user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getSkillTriggerOfAllCertificates", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="certificate_triggers")]
        System.Threading.Tasks.Task<string> getSkillTriggerOfAllCertificatesAsync(string sid, string user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getUserIdBySid", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="usr_id")]
        int getUserIdBySid(string sid);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getUserIdBySid", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="usr_id")]
        System.Threading.Tasks.Task<int> getUserIdBySidAsync(string sid);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#deleteExpiredDualOptInUserObjects", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        bool deleteExpiredDualOptInUserObjects(string sid, int usr_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#deleteExpiredDualOptInUserObjects", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        System.Threading.Tasks.Task<bool> deleteExpiredDualOptInUserObjectsAsync(string sid, int usr_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#readWebLink", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="weblinkxml")]
        string readWebLink(string sid, int ref_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#readWebLink", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="weblinkxml")]
        System.Threading.Tasks.Task<string> readWebLinkAsync(string sid, int ref_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#createWebLink", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="refid")]
        int createWebLink(string sid, int target_id, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#createWebLink", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="refid")]
        System.Threading.Tasks.Task<int> createWebLinkAsync(string sid, int target_id, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#updateWebLink", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        bool updateWebLink(string sid, int ref_id, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#updateWebLink", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="success")]
        System.Threading.Tasks.Task<bool> updateWebLinkAsync(string sid, int ref_id, string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getLearningProgressChanges", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="lp_data")]
        string getLearningProgressChanges(string sid, string timestamp, bool include_ref_ids, string[] type_filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getLearningProgressChanges", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="lp_data")]
        System.Threading.Tasks.Task<string> getLearningProgressChangesAsync(string sid, string timestamp, bool include_ref_ids, string[] type_filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#deleteProgress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        bool deleteProgress(string sid, int[] ref_ids, int[] usr_ids, string[] type_filter, int[] progress_filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#deleteProgress", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        System.Threading.Tasks.Task<bool> deleteProgressAsync(string sid, int[] ref_ids, int[] usr_ids, string[] type_filter, int[] progress_filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getProgressInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="user_results")]
        string getProgressInfo(string sid, int ref_id, int[] progress_filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#getProgressInfo", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="user_results")]
        System.Threading.Tasks.Task<string> getProgressInfoAsync(string sid, int ref_id, int[] progress_filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#exportDataCollectionTableContent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="export_path")]
        string exportDataCollectionContent(string sid, int ref_id, int table_id, string format, string filepath);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#exportDataCollectionTableContent", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="export_path")]
        System.Threading.Tasks.Task<string> exportDataCollectionContentAsync(string sid, int ref_id, int table_id, string format, string filepath);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#processBackgroundTask", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ilOperation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        bool processBackgroundTask(string sid, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ilUserAdministration#processBackgroundTask", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="status")]
        System.Threading.Tasks.Task<bool> processBackgroundTaskAsync(string sid, int task_id);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="loginStudipUser", WrapperNamespace="urn:ilUserAdministration", IsWrapped=true)]
    public partial class loginStudipUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string sid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int user_id;
        
        public loginStudipUserRequest() {
        }
        
        public loginStudipUserRequest(string sid, int user_id) {
            this.sid = sid;
            this.user_id = user_id;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="loginStudipUserResponse", WrapperNamespace="urn:ilUserAdministration", IsWrapped=true)]
    public partial class loginStudipUserResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string sid;
        
        public loginStudipUserResponse() {
        }
        
        public loginStudipUserResponse(string sid) {
            this.sid = sid;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ilUserAdministration")]
    public partial class ilUserData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int usr_idField;
        
        private string loginField;
        
        private string passwdField;
        
        private string firstnameField;
        
        private string lastnameField;
        
        private string titleField;
        
        private string genderField;
        
        private string emailField;
        
        private string institutionField;
        
        private string streetField;
        
        private string cityField;
        
        private string zipcodeField;
        
        private string countryField;
        
        private string phone_officeField;
        
        private string last_loginField;
        
        private string last_updateField;
        
        private string create_dateField;
        
        private string hobbyField;
        
        private string departmentField;
        
        private string phone_homeField;
        
        private string phone_mobileField;
        
        private string faxField;
        
        private int time_limit_ownerField;
        
        private int time_limit_unlimitedField;
        
        private int time_limit_fromField;
        
        private int time_limit_untilField;
        
        private int time_limit_messageField;
        
        private string referral_commentField;
        
        private string matriculationField;
        
        private int activeField;
        
        private bool accepted_agreementField;
        
        private string approve_dateField;
        
        private string user_skinField;
        
        private string user_styleField;
        
        private string user_languageField;
        
        private string import_idField;
        
        /// <remarks/>
        public int usr_id {
            get {
                return this.usr_idField;
            }
            set {
                this.usr_idField = value;
                this.RaisePropertyChanged("usr_id");
            }
        }
        
        /// <remarks/>
        public string login {
            get {
                return this.loginField;
            }
            set {
                this.loginField = value;
                this.RaisePropertyChanged("login");
            }
        }
        
        /// <remarks/>
        public string passwd {
            get {
                return this.passwdField;
            }
            set {
                this.passwdField = value;
                this.RaisePropertyChanged("passwd");
            }
        }
        
        /// <remarks/>
        public string firstname {
            get {
                return this.firstnameField;
            }
            set {
                this.firstnameField = value;
                this.RaisePropertyChanged("firstname");
            }
        }
        
        /// <remarks/>
        public string lastname {
            get {
                return this.lastnameField;
            }
            set {
                this.lastnameField = value;
                this.RaisePropertyChanged("lastname");
            }
        }
        
        /// <remarks/>
        public string title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
                this.RaisePropertyChanged("title");
            }
        }
        
        /// <remarks/>
        public string gender {
            get {
                return this.genderField;
            }
            set {
                this.genderField = value;
                this.RaisePropertyChanged("gender");
            }
        }
        
        /// <remarks/>
        public string email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
                this.RaisePropertyChanged("email");
            }
        }
        
        /// <remarks/>
        public string institution {
            get {
                return this.institutionField;
            }
            set {
                this.institutionField = value;
                this.RaisePropertyChanged("institution");
            }
        }
        
        /// <remarks/>
        public string street {
            get {
                return this.streetField;
            }
            set {
                this.streetField = value;
                this.RaisePropertyChanged("street");
            }
        }
        
        /// <remarks/>
        public string city {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
                this.RaisePropertyChanged("city");
            }
        }
        
        /// <remarks/>
        public string zipcode {
            get {
                return this.zipcodeField;
            }
            set {
                this.zipcodeField = value;
                this.RaisePropertyChanged("zipcode");
            }
        }
        
        /// <remarks/>
        public string country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
                this.RaisePropertyChanged("country");
            }
        }
        
        /// <remarks/>
        public string phone_office {
            get {
                return this.phone_officeField;
            }
            set {
                this.phone_officeField = value;
                this.RaisePropertyChanged("phone_office");
            }
        }
        
        /// <remarks/>
        public string last_login {
            get {
                return this.last_loginField;
            }
            set {
                this.last_loginField = value;
                this.RaisePropertyChanged("last_login");
            }
        }
        
        /// <remarks/>
        public string last_update {
            get {
                return this.last_updateField;
            }
            set {
                this.last_updateField = value;
                this.RaisePropertyChanged("last_update");
            }
        }
        
        /// <remarks/>
        public string create_date {
            get {
                return this.create_dateField;
            }
            set {
                this.create_dateField = value;
                this.RaisePropertyChanged("create_date");
            }
        }
        
        /// <remarks/>
        public string hobby {
            get {
                return this.hobbyField;
            }
            set {
                this.hobbyField = value;
                this.RaisePropertyChanged("hobby");
            }
        }
        
        /// <remarks/>
        public string department {
            get {
                return this.departmentField;
            }
            set {
                this.departmentField = value;
                this.RaisePropertyChanged("department");
            }
        }
        
        /// <remarks/>
        public string phone_home {
            get {
                return this.phone_homeField;
            }
            set {
                this.phone_homeField = value;
                this.RaisePropertyChanged("phone_home");
            }
        }
        
        /// <remarks/>
        public string phone_mobile {
            get {
                return this.phone_mobileField;
            }
            set {
                this.phone_mobileField = value;
                this.RaisePropertyChanged("phone_mobile");
            }
        }
        
        /// <remarks/>
        public string fax {
            get {
                return this.faxField;
            }
            set {
                this.faxField = value;
                this.RaisePropertyChanged("fax");
            }
        }
        
        /// <remarks/>
        public int time_limit_owner {
            get {
                return this.time_limit_ownerField;
            }
            set {
                this.time_limit_ownerField = value;
                this.RaisePropertyChanged("time_limit_owner");
            }
        }
        
        /// <remarks/>
        public int time_limit_unlimited {
            get {
                return this.time_limit_unlimitedField;
            }
            set {
                this.time_limit_unlimitedField = value;
                this.RaisePropertyChanged("time_limit_unlimited");
            }
        }
        
        /// <remarks/>
        public int time_limit_from {
            get {
                return this.time_limit_fromField;
            }
            set {
                this.time_limit_fromField = value;
                this.RaisePropertyChanged("time_limit_from");
            }
        }
        
        /// <remarks/>
        public int time_limit_until {
            get {
                return this.time_limit_untilField;
            }
            set {
                this.time_limit_untilField = value;
                this.RaisePropertyChanged("time_limit_until");
            }
        }
        
        /// <remarks/>
        public int time_limit_message {
            get {
                return this.time_limit_messageField;
            }
            set {
                this.time_limit_messageField = value;
                this.RaisePropertyChanged("time_limit_message");
            }
        }
        
        /// <remarks/>
        public string referral_comment {
            get {
                return this.referral_commentField;
            }
            set {
                this.referral_commentField = value;
                this.RaisePropertyChanged("referral_comment");
            }
        }
        
        /// <remarks/>
        public string matriculation {
            get {
                return this.matriculationField;
            }
            set {
                this.matriculationField = value;
                this.RaisePropertyChanged("matriculation");
            }
        }
        
        /// <remarks/>
        public int active {
            get {
                return this.activeField;
            }
            set {
                this.activeField = value;
                this.RaisePropertyChanged("active");
            }
        }
        
        /// <remarks/>
        public bool accepted_agreement {
            get {
                return this.accepted_agreementField;
            }
            set {
                this.accepted_agreementField = value;
                this.RaisePropertyChanged("accepted_agreement");
            }
        }
        
        /// <remarks/>
        public string approve_date {
            get {
                return this.approve_dateField;
            }
            set {
                this.approve_dateField = value;
                this.RaisePropertyChanged("approve_date");
            }
        }
        
        /// <remarks/>
        public string user_skin {
            get {
                return this.user_skinField;
            }
            set {
                this.user_skinField = value;
                this.RaisePropertyChanged("user_skin");
            }
        }
        
        /// <remarks/>
        public string user_style {
            get {
                return this.user_styleField;
            }
            set {
                this.user_styleField = value;
                this.RaisePropertyChanged("user_style");
            }
        }
        
        /// <remarks/>
        public string user_language {
            get {
                return this.user_languageField;
            }
            set {
                this.user_languageField = value;
                this.RaisePropertyChanged("user_language");
            }
        }
        
        /// <remarks/>
        public string import_id {
            get {
                return this.import_idField;
            }
            set {
                this.import_idField = value;
                this.RaisePropertyChanged("import_id");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ilUserAdministration")]
    public partial class ilOperation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ops_idField;
        
        private string operationField;
        
        private string descriptionField;
        
        /// <remarks/>
        public int ops_id {
            get {
                return this.ops_idField;
            }
            set {
                this.ops_idField = value;
                this.RaisePropertyChanged("ops_id");
            }
        }
        
        /// <remarks/>
        public string operation {
            get {
                return this.operationField;
            }
            set {
                this.operationField = value;
                this.RaisePropertyChanged("operation");
            }
        }
        
        /// <remarks/>
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("description");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="copyObject", WrapperNamespace="urn:ilUserAdministration", IsWrapped=true)]
    public partial class copyObjectRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string sid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string xml;
        
        public copyObjectRequest() {
        }
        
        public copyObjectRequest(string sid, string xml) {
            this.sid = sid;
            this.xml = xml;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="copyObjectResponse", WrapperNamespace="urn:ilUserAdministration", IsWrapped=true)]
    public partial class copyObjectResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public int xml;
        
        public copyObjectResponse() {
        }
        
        public copyObjectResponse(int xml) {
            this.xml = xml;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILIASSoapWebservicePortTypeChannel : WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ILIASSoapWebservicePortType, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LIASSoapWebservicePortTypeClient : System.ServiceModel.ClientBase<WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ILIASSoapWebservicePortType>, WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ILIASSoapWebservicePortType {
        
        public LIASSoapWebservicePortTypeClient() {
        }
        
        public LIASSoapWebservicePortTypeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LIASSoapWebservicePortTypeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LIASSoapWebservicePortTypeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LIASSoapWebservicePortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string login(string client, string username, string password) {
            return base.Channel.login(client, username, password);
        }
        
        public System.Threading.Tasks.Task<string> loginAsync(string client, string username, string password) {
            return base.Channel.loginAsync(client, username, password);
        }
        
        public string loginCAS(string client, string PT, string user) {
            return base.Channel.loginCAS(client, PT, user);
        }
        
        public System.Threading.Tasks.Task<string> loginCASAsync(string client, string PT, string user) {
            return base.Channel.loginCASAsync(client, PT, user);
        }
        
        public string loginLDAP(string client, string username, string password) {
            return base.Channel.loginLDAP(client, username, password);
        }
        
        public System.Threading.Tasks.Task<string> loginLDAPAsync(string client, string username, string password) {
            return base.Channel.loginLDAPAsync(client, username, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WPF_ILIAS_Sync2Folder.IliasSoapWebservice.loginStudipUserResponse WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ILIASSoapWebservicePortType.loginStudipUser(WPF_ILIAS_Sync2Folder.IliasSoapWebservice.loginStudipUserRequest request) {
            return base.Channel.loginStudipUser(request);
        }
        
        public void loginStudipUser(ref string sid, int user_id) {
            WPF_ILIAS_Sync2Folder.IliasSoapWebservice.loginStudipUserRequest inValue = new WPF_ILIAS_Sync2Folder.IliasSoapWebservice.loginStudipUserRequest();
            inValue.sid = sid;
            inValue.user_id = user_id;
            WPF_ILIAS_Sync2Folder.IliasSoapWebservice.loginStudipUserResponse retVal = ((WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ILIASSoapWebservicePortType)(this)).loginStudipUser(inValue);
            sid = retVal.sid;
        }
        
        public System.Threading.Tasks.Task<WPF_ILIAS_Sync2Folder.IliasSoapWebservice.loginStudipUserResponse> loginStudipUserAsync(WPF_ILIAS_Sync2Folder.IliasSoapWebservice.loginStudipUserRequest request) {
            return base.Channel.loginStudipUserAsync(request);
        }
        
        public bool logout(string sid) {
            return base.Channel.logout(sid);
        }
        
        public System.Threading.Tasks.Task<bool> logoutAsync(string sid) {
            return base.Channel.logoutAsync(sid);
        }
        
        public int lookupUser(string sid, string user_name) {
            return base.Channel.lookupUser(sid, user_name);
        }
        
        public System.Threading.Tasks.Task<int> lookupUserAsync(string sid, string user_name) {
            return base.Channel.lookupUserAsync(sid, user_name);
        }
        
        public WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ilUserData getUser(string sid, int user_id) {
            return base.Channel.getUser(sid, user_id);
        }
        
        public System.Threading.Tasks.Task<WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ilUserData> getUserAsync(string sid, int user_id) {
            return base.Channel.getUserAsync(sid, user_id);
        }
        
        public bool deleteUser(string sid, int user_id) {
            return base.Channel.deleteUser(sid, user_id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteUserAsync(string sid, int user_id) {
            return base.Channel.deleteUserAsync(sid, user_id);
        }
        
        public int addCourse(string sid, int target_id, string crs_xml) {
            return base.Channel.addCourse(sid, target_id, crs_xml);
        }
        
        public System.Threading.Tasks.Task<int> addCourseAsync(string sid, int target_id, string crs_xml) {
            return base.Channel.addCourseAsync(sid, target_id, crs_xml);
        }
        
        public bool deleteCourse(string sid, int course_id) {
            return base.Channel.deleteCourse(sid, course_id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteCourseAsync(string sid, int course_id) {
            return base.Channel.deleteCourseAsync(sid, course_id);
        }
        
        public bool assignCourseMember(string sid, int course_id, int user_id, string type) {
            return base.Channel.assignCourseMember(sid, course_id, user_id, type);
        }
        
        public System.Threading.Tasks.Task<bool> assignCourseMemberAsync(string sid, int course_id, int user_id, string type) {
            return base.Channel.assignCourseMemberAsync(sid, course_id, user_id, type);
        }
        
        public bool excludeCourseMember(string sid, int course_id, int user_id) {
            return base.Channel.excludeCourseMember(sid, course_id, user_id);
        }
        
        public System.Threading.Tasks.Task<bool> excludeCourseMemberAsync(string sid, int course_id, int user_id) {
            return base.Channel.excludeCourseMemberAsync(sid, course_id, user_id);
        }
        
        public int isAssignedToCourse(string sid, int course_id, int user_id) {
            return base.Channel.isAssignedToCourse(sid, course_id, user_id);
        }
        
        public System.Threading.Tasks.Task<int> isAssignedToCourseAsync(string sid, int course_id, int user_id) {
            return base.Channel.isAssignedToCourseAsync(sid, course_id, user_id);
        }
        
        public string getCourseXML(string sid, int course_id) {
            return base.Channel.getCourseXML(sid, course_id);
        }
        
        public System.Threading.Tasks.Task<string> getCourseXMLAsync(string sid, int course_id) {
            return base.Channel.getCourseXMLAsync(sid, course_id);
        }
        
        public bool updateCourse(string sid, int course_id, string xml) {
            return base.Channel.updateCourse(sid, course_id, xml);
        }
        
        public System.Threading.Tasks.Task<bool> updateCourseAsync(string sid, int course_id, string xml) {
            return base.Channel.updateCourseAsync(sid, course_id, xml);
        }
        
        public int getObjIdByImportId(string sid, string import_id) {
            return base.Channel.getObjIdByImportId(sid, import_id);
        }
        
        public System.Threading.Tasks.Task<int> getObjIdByImportIdAsync(string sid, string import_id) {
            return base.Channel.getObjIdByImportIdAsync(sid, import_id);
        }
        
        public int[] getRefIdsByImportId(string sid, string import_id) {
            return base.Channel.getRefIdsByImportId(sid, import_id);
        }
        
        public System.Threading.Tasks.Task<int[]> getRefIdsByImportIdAsync(string sid, string import_id) {
            return base.Channel.getRefIdsByImportIdAsync(sid, import_id);
        }
        
        public int[] getRefIdsByObjId(string sid, string obj_id) {
            return base.Channel.getRefIdsByObjId(sid, obj_id);
        }
        
        public System.Threading.Tasks.Task<int[]> getRefIdsByObjIdAsync(string sid, string obj_id) {
            return base.Channel.getRefIdsByObjIdAsync(sid, obj_id);
        }
        
        public string getObjectByReference(string sid, int reference_id, int user_id) {
            return base.Channel.getObjectByReference(sid, reference_id, user_id);
        }
        
        public System.Threading.Tasks.Task<string> getObjectByReferenceAsync(string sid, int reference_id, int user_id) {
            return base.Channel.getObjectByReferenceAsync(sid, reference_id, user_id);
        }
        
        public string getObjectsByTitle(string sid, string title, int user_id) {
            return base.Channel.getObjectsByTitle(sid, title, user_id);
        }
        
        public System.Threading.Tasks.Task<string> getObjectsByTitleAsync(string sid, string title, int user_id) {
            return base.Channel.getObjectsByTitleAsync(sid, title, user_id);
        }
        
        public string searchObjects(string sid, string[] types, string key, string combination, int user_id) {
            return base.Channel.searchObjects(sid, types, key, combination, user_id);
        }
        
        public System.Threading.Tasks.Task<string> searchObjectsAsync(string sid, string[] types, string key, string combination, int user_id) {
            return base.Channel.searchObjectsAsync(sid, types, key, combination, user_id);
        }
        
        public string getTreeChilds(string sid, int ref_id, string[] types, int user_id) {
            return base.Channel.getTreeChilds(sid, ref_id, types, user_id);
        }
        
        public System.Threading.Tasks.Task<string> getTreeChildsAsync(string sid, int ref_id, string[] types, int user_id) {
            return base.Channel.getTreeChildsAsync(sid, ref_id, types, user_id);
        }
        
        public string getXMLTree(string sid, int ref_id, string[] types, int user_id) {
            return base.Channel.getXMLTree(sid, ref_id, types, user_id);
        }
        
        public System.Threading.Tasks.Task<string> getXMLTreeAsync(string sid, int ref_id, string[] types, int user_id) {
            return base.Channel.getXMLTreeAsync(sid, ref_id, types, user_id);
        }
        
        public int addObject(string sid, int target_id, string object_xml) {
            return base.Channel.addObject(sid, target_id, object_xml);
        }
        
        public System.Threading.Tasks.Task<int> addObjectAsync(string sid, int target_id, string object_xml) {
            return base.Channel.addObjectAsync(sid, target_id, object_xml);
        }
        
        public bool updateObjects(string sid, string object_xml) {
            return base.Channel.updateObjects(sid, object_xml);
        }
        
        public System.Threading.Tasks.Task<bool> updateObjectsAsync(string sid, string object_xml) {
            return base.Channel.updateObjectsAsync(sid, object_xml);
        }
        
        public int addReference(string sid, int source_id, int target_id) {
            return base.Channel.addReference(sid, source_id, target_id);
        }
        
        public System.Threading.Tasks.Task<int> addReferenceAsync(string sid, int source_id, int target_id) {
            return base.Channel.addReferenceAsync(sid, source_id, target_id);
        }
        
        public bool deleteObject(string sid, int reference_id) {
            return base.Channel.deleteObject(sid, reference_id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteObjectAsync(string sid, int reference_id) {
            return base.Channel.deleteObjectAsync(sid, reference_id);
        }
        
        public bool removeFromSystemByImportId(string sid, string import_id) {
            return base.Channel.removeFromSystemByImportId(sid, import_id);
        }
        
        public System.Threading.Tasks.Task<bool> removeFromSystemByImportIdAsync(string sid, string import_id) {
            return base.Channel.removeFromSystemByImportIdAsync(sid, import_id);
        }
        
        public bool addUserRoleEntry(string sid, int user_id, int role_id) {
            return base.Channel.addUserRoleEntry(sid, user_id, role_id);
        }
        
        public System.Threading.Tasks.Task<bool> addUserRoleEntryAsync(string sid, int user_id, int role_id) {
            return base.Channel.addUserRoleEntryAsync(sid, user_id, role_id);
        }
        
        public bool deleteUserRoleEntry(string sid, int user_id, int role_id) {
            return base.Channel.deleteUserRoleEntry(sid, user_id, role_id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteUserRoleEntryAsync(string sid, int user_id, int role_id) {
            return base.Channel.deleteUserRoleEntryAsync(sid, user_id, role_id);
        }
        
        public WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ilOperation[] getOperations(string sid) {
            return base.Channel.getOperations(sid);
        }
        
        public System.Threading.Tasks.Task<WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ilOperation[]> getOperationsAsync(string sid) {
            return base.Channel.getOperationsAsync(sid);
        }
        
        public bool revokePermissions(string sid, int ref_id, int role_id) {
            return base.Channel.revokePermissions(sid, ref_id, role_id);
        }
        
        public System.Threading.Tasks.Task<bool> revokePermissionsAsync(string sid, int ref_id, int role_id) {
            return base.Channel.revokePermissionsAsync(sid, ref_id, role_id);
        }
        
        public bool grantPermissions(string sid, int ref_id, int role_id, int[] operations) {
            return base.Channel.grantPermissions(sid, ref_id, role_id, operations);
        }
        
        public System.Threading.Tasks.Task<bool> grantPermissionsAsync(string sid, int ref_id, int role_id, int[] operations) {
            return base.Channel.grantPermissionsAsync(sid, ref_id, role_id, operations);
        }
        
        public string getLocalRoles(string sid, int ref_id) {
            return base.Channel.getLocalRoles(sid, ref_id);
        }
        
        public System.Threading.Tasks.Task<string> getLocalRolesAsync(string sid, int ref_id) {
            return base.Channel.getLocalRolesAsync(sid, ref_id);
        }
        
        public string getUserRoles(string sid, int user_id) {
            return base.Channel.getUserRoles(sid, user_id);
        }
        
        public System.Threading.Tasks.Task<string> getUserRolesAsync(string sid, int user_id) {
            return base.Channel.getUserRolesAsync(sid, user_id);
        }
        
        public int[] addRole(string sid, int target_id, string obj_xml) {
            return base.Channel.addRole(sid, target_id, obj_xml);
        }
        
        public System.Threading.Tasks.Task<int[]> addRoleAsync(string sid, int target_id, string obj_xml) {
            return base.Channel.addRoleAsync(sid, target_id, obj_xml);
        }
        
        public bool deleteRole(string sid, int role_id) {
            return base.Channel.deleteRole(sid, role_id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteRoleAsync(string sid, int role_id) {
            return base.Channel.deleteRoleAsync(sid, role_id);
        }
        
        public int[] addRoleFromTemplate(string sid, int target_id, string obj_xml, int role_template_id) {
            return base.Channel.addRoleFromTemplate(sid, target_id, obj_xml, role_template_id);
        }
        
        public System.Threading.Tasks.Task<int[]> addRoleFromTemplateAsync(string sid, int target_id, string obj_xml, int role_template_id) {
            return base.Channel.addRoleFromTemplateAsync(sid, target_id, obj_xml, role_template_id);
        }
        
        public WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ilOperation[] getObjectTreeOperations(string sid, int ref_id, int user_id) {
            return base.Channel.getObjectTreeOperations(sid, ref_id, user_id);
        }
        
        public System.Threading.Tasks.Task<WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ilOperation[]> getObjectTreeOperationsAsync(string sid, int ref_id, int user_id) {
            return base.Channel.getObjectTreeOperationsAsync(sid, ref_id, user_id);
        }
        
        public int addGroup(string sid, int target_id, string group_xml) {
            return base.Channel.addGroup(sid, target_id, group_xml);
        }
        
        public System.Threading.Tasks.Task<int> addGroupAsync(string sid, int target_id, string group_xml) {
            return base.Channel.addGroupAsync(sid, target_id, group_xml);
        }
        
        public bool groupExists(string sid, string title) {
            return base.Channel.groupExists(sid, title);
        }
        
        public System.Threading.Tasks.Task<bool> groupExistsAsync(string sid, string title) {
            return base.Channel.groupExistsAsync(sid, title);
        }
        
        public string getGroup(string sid, int ref_id) {
            return base.Channel.getGroup(sid, ref_id);
        }
        
        public System.Threading.Tasks.Task<string> getGroupAsync(string sid, int ref_id) {
            return base.Channel.getGroupAsync(sid, ref_id);
        }
        
        public bool assignGroupMember(string sid, int group_id, int user_id, string type) {
            return base.Channel.assignGroupMember(sid, group_id, user_id, type);
        }
        
        public System.Threading.Tasks.Task<bool> assignGroupMemberAsync(string sid, int group_id, int user_id, string type) {
            return base.Channel.assignGroupMemberAsync(sid, group_id, user_id, type);
        }
        
        public bool excludeGroupMember(string sid, int group_id, int user_id) {
            return base.Channel.excludeGroupMember(sid, group_id, user_id);
        }
        
        public System.Threading.Tasks.Task<bool> excludeGroupMemberAsync(string sid, int group_id, int user_id) {
            return base.Channel.excludeGroupMemberAsync(sid, group_id, user_id);
        }
        
        public int isAssignedToGroup(string sid, int group_id, int user_id) {
            return base.Channel.isAssignedToGroup(sid, group_id, user_id);
        }
        
        public System.Threading.Tasks.Task<int> isAssignedToGroupAsync(string sid, int group_id, int user_id) {
            return base.Channel.isAssignedToGroupAsync(sid, group_id, user_id);
        }
        
        public bool sendMail(string sid, string rcp_to, string rcp_cc, string rcp_bcc, string sender, string subject, string message, string attachments) {
            return base.Channel.sendMail(sid, rcp_to, rcp_cc, rcp_bcc, sender, subject, message, attachments);
        }
        
        public System.Threading.Tasks.Task<bool> sendMailAsync(string sid, string rcp_to, string rcp_cc, string rcp_bcc, string sender, string subject, string message, string attachments) {
            return base.Channel.sendMailAsync(sid, rcp_to, rcp_cc, rcp_bcc, sender, subject, message, attachments);
        }
        
        public bool distributeMails(string sid, string mail_xml) {
            return base.Channel.distributeMails(sid, mail_xml);
        }
        
        public System.Threading.Tasks.Task<bool> distributeMailsAsync(string sid, string mail_xml) {
            return base.Channel.distributeMailsAsync(sid, mail_xml);
        }
        
        public int ilClone(string sid, int copy_identifier) {
            return base.Channel.ilClone(sid, copy_identifier);
        }
        
        public System.Threading.Tasks.Task<int> ilCloneAsync(string sid, int copy_identifier) {
            return base.Channel.ilCloneAsync(sid, copy_identifier);
        }
        
        public bool handleECSTasks(string sid, int server_id) {
            return base.Channel.handleECSTasks(sid, server_id);
        }
        
        public System.Threading.Tasks.Task<bool> handleECSTasksAsync(string sid, int server_id) {
            return base.Channel.handleECSTasksAsync(sid, server_id);
        }
        
        public bool ilCloneDependencies(string sid, int copy_identifier) {
            return base.Channel.ilCloneDependencies(sid, copy_identifier);
        }
        
        public System.Threading.Tasks.Task<bool> ilCloneDependenciesAsync(string sid, int copy_identifier) {
            return base.Channel.ilCloneDependenciesAsync(sid, copy_identifier);
        }
        
        public bool saveQuestionResult(string sid, int user_id, int test_id, int question_id, int pass, string[] solution) {
            return base.Channel.saveQuestionResult(sid, user_id, test_id, question_id, pass, solution);
        }
        
        public System.Threading.Tasks.Task<bool> saveQuestionResultAsync(string sid, int user_id, int test_id, int question_id, int pass, string[] solution) {
            return base.Channel.saveQuestionResultAsync(sid, user_id, test_id, question_id, pass, solution);
        }
        
        public bool saveQuestion(string sid, long active_id, long question_id, int pass, string[] solution) {
            return base.Channel.saveQuestion(sid, active_id, question_id, pass, solution);
        }
        
        public System.Threading.Tasks.Task<bool> saveQuestionAsync(string sid, long active_id, long question_id, int pass, string[] solution) {
            return base.Channel.saveQuestionAsync(sid, active_id, question_id, pass, solution);
        }
        
        public string saveQuestionSolution(string sid, long active_id, long question_id, int pass, string solution) {
            return base.Channel.saveQuestionSolution(sid, active_id, question_id, pass, solution);
        }
        
        public System.Threading.Tasks.Task<string> saveQuestionSolutionAsync(string sid, long active_id, long question_id, int pass, string solution) {
            return base.Channel.saveQuestionSolutionAsync(sid, active_id, question_id, pass, solution);
        }
        
        public string[] getQuestionSolution(string sid, long active_id, int question_id, int pass) {
            return base.Channel.getQuestionSolution(sid, active_id, question_id, pass);
        }
        
        public System.Threading.Tasks.Task<string[]> getQuestionSolutionAsync(string sid, long active_id, int question_id, int pass) {
            return base.Channel.getQuestionSolutionAsync(sid, active_id, question_id, pass);
        }
        
        public string[] getTestUserData(string sid, long active_id) {
            return base.Channel.getTestUserData(sid, active_id);
        }
        
        public System.Threading.Tasks.Task<string[]> getTestUserDataAsync(string sid, long active_id) {
            return base.Channel.getTestUserDataAsync(sid, active_id);
        }
        
        public int getPositionOfQuestion(string sid, long active_id, int question_id, int pass) {
            return base.Channel.getPositionOfQuestion(sid, active_id, question_id, pass);
        }
        
        public System.Threading.Tasks.Task<int> getPositionOfQuestionAsync(string sid, long active_id, int question_id, int pass) {
            return base.Channel.getPositionOfQuestionAsync(sid, active_id, question_id, pass);
        }
        
        public double[] getPreviousReachedPoints(string sid, long active_id, int question_id, int pass) {
            return base.Channel.getPreviousReachedPoints(sid, active_id, question_id, pass);
        }
        
        public System.Threading.Tasks.Task<double[]> getPreviousReachedPointsAsync(string sid, long active_id, int question_id, int pass) {
            return base.Channel.getPreviousReachedPointsAsync(sid, active_id, question_id, pass);
        }
        
        public int getNrOfQuestionsInPass(string sid, long active_id, int pass) {
            return base.Channel.getNrOfQuestionsInPass(sid, active_id, pass);
        }
        
        public System.Threading.Tasks.Task<int> getNrOfQuestionsInPassAsync(string sid, long active_id, int pass) {
            return base.Channel.getNrOfQuestionsInPassAsync(sid, active_id, pass);
        }
        
        public string getStructureObjects(string sid, int ref_id) {
            return base.Channel.getStructureObjects(sid, ref_id);
        }
        
        public System.Threading.Tasks.Task<string> getStructureObjectsAsync(string sid, int ref_id) {
            return base.Channel.getStructureObjectsAsync(sid, ref_id);
        }
        
        public string importUsers(string sid, int folder_id, string usr_xml, int conflict_rule, int send_account_mail) {
            return base.Channel.importUsers(sid, folder_id, usr_xml, conflict_rule, send_account_mail);
        }
        
        public System.Threading.Tasks.Task<string> importUsersAsync(string sid, int folder_id, string usr_xml, int conflict_rule, int send_account_mail) {
            return base.Channel.importUsersAsync(sid, folder_id, usr_xml, conflict_rule, send_account_mail);
        }
        
        public string getRoles(string sid, string role_type, string id) {
            return base.Channel.getRoles(sid, role_type, id);
        }
        
        public System.Threading.Tasks.Task<string> getRolesAsync(string sid, string role_type, string id) {
            return base.Channel.getRolesAsync(sid, role_type, id);
        }
        
        public string getUsersForContainer(string sid, int ref_id, int attach_roles, int active) {
            return base.Channel.getUsersForContainer(sid, ref_id, attach_roles, active);
        }
        
        public System.Threading.Tasks.Task<string> getUsersForContainerAsync(string sid, int ref_id, int attach_roles, int active) {
            return base.Channel.getUsersForContainerAsync(sid, ref_id, attach_roles, active);
        }
        
        public string getUsersForRole(string sid, int role_id, int attach_roles, int active) {
            return base.Channel.getUsersForRole(sid, role_id, attach_roles, active);
        }
        
        public System.Threading.Tasks.Task<string> getUsersForRoleAsync(string sid, int role_id, int attach_roles, int active) {
            return base.Channel.getUsersForRoleAsync(sid, role_id, attach_roles, active);
        }
        
        public string searchUser(string sid, string[] key_fields, string query_operator, string[] key_values, int attach_roles, int active) {
            return base.Channel.searchUser(sid, key_fields, query_operator, key_values, attach_roles, active);
        }
        
        public System.Threading.Tasks.Task<string> searchUserAsync(string sid, string[] key_fields, string query_operator, string[] key_values, int attach_roles, int active) {
            return base.Channel.searchUserAsync(sid, key_fields, query_operator, key_values, attach_roles, active);
        }
        
        public bool hasNewMail(string sid) {
            return base.Channel.hasNewMail(sid);
        }
        
        public System.Threading.Tasks.Task<bool> hasNewMailAsync(string sid) {
            return base.Channel.hasNewMailAsync(sid);
        }
        
        public string getNIC(string sid) {
            return base.Channel.getNIC(sid);
        }
        
        public System.Threading.Tasks.Task<string> getNICAsync(string sid) {
            return base.Channel.getNICAsync(sid);
        }
        
        public string getExerciseXML(string sid, int ref_id, int attachment_mode) {
            return base.Channel.getExerciseXML(sid, ref_id, attachment_mode);
        }
        
        public System.Threading.Tasks.Task<string> getExerciseXMLAsync(string sid, int ref_id, int attachment_mode) {
            return base.Channel.getExerciseXMLAsync(sid, ref_id, attachment_mode);
        }
        
        public int addExercise(string sid, int target_id, string xml) {
            return base.Channel.addExercise(sid, target_id, xml);
        }
        
        public System.Threading.Tasks.Task<int> addExerciseAsync(string sid, int target_id, string xml) {
            return base.Channel.addExerciseAsync(sid, target_id, xml);
        }
        
        public bool updateExercise(string sid, int ref_id, string xml) {
            return base.Channel.updateExercise(sid, ref_id, xml);
        }
        
        public System.Threading.Tasks.Task<bool> updateExerciseAsync(string sid, int ref_id, string xml) {
            return base.Channel.updateExerciseAsync(sid, ref_id, xml);
        }
        
        public string getFileXML(string sid, int ref_id, int attachment_mode) {
            return base.Channel.getFileXML(sid, ref_id, attachment_mode);
        }
        
        public System.Threading.Tasks.Task<string> getFileXMLAsync(string sid, int ref_id, int attachment_mode) {
            return base.Channel.getFileXMLAsync(sid, ref_id, attachment_mode);
        }
        
        public int addFile(string sid, int target_id, string xml) {
            return base.Channel.addFile(sid, target_id, xml);
        }
        
        public System.Threading.Tasks.Task<int> addFileAsync(string sid, int target_id, string xml) {
            return base.Channel.addFileAsync(sid, target_id, xml);
        }
        
        public bool updateFile(string sid, int ref_id, string xml) {
            return base.Channel.updateFile(sid, ref_id, xml);
        }
        
        public System.Threading.Tasks.Task<bool> updateFileAsync(string sid, int ref_id, string xml) {
            return base.Channel.updateFileAsync(sid, ref_id, xml);
        }
        
        public string getUserXML(string sid, int[] user_ids, int attach_roles) {
            return base.Channel.getUserXML(sid, user_ids, attach_roles);
        }
        
        public System.Threading.Tasks.Task<string> getUserXMLAsync(string sid, int[] user_ids, int attach_roles) {
            return base.Channel.getUserXMLAsync(sid, user_ids, attach_roles);
        }
        
        public int[] getObjIdsByRefIds(string sid, int[] ref_ids) {
            return base.Channel.getObjIdsByRefIds(sid, ref_ids);
        }
        
        public System.Threading.Tasks.Task<int[]> getObjIdsByRefIdsAsync(string sid, int[] ref_ids) {
            return base.Channel.getObjIdsByRefIdsAsync(sid, ref_ids);
        }
        
        public bool updateGroup(string sid, int ref_id, string xml) {
            return base.Channel.updateGroup(sid, ref_id, xml);
        }
        
        public System.Threading.Tasks.Task<bool> updateGroupAsync(string sid, int ref_id, string xml) {
            return base.Channel.updateGroupAsync(sid, ref_id, xml);
        }
        
        public string getIMSManifestXML(string sid, int ref_id) {
            return base.Channel.getIMSManifestXML(sid, ref_id);
        }
        
        public System.Threading.Tasks.Task<string> getIMSManifestXMLAsync(string sid, int ref_id) {
            return base.Channel.getIMSManifestXMLAsync(sid, ref_id);
        }
        
        public bool hasSCORMCertificate(string sid, int ref_id, int usr_id) {
            return base.Channel.hasSCORMCertificate(sid, ref_id, usr_id);
        }
        
        public System.Threading.Tasks.Task<bool> hasSCORMCertificateAsync(string sid, int ref_id, int usr_id) {
            return base.Channel.hasSCORMCertificateAsync(sid, ref_id, usr_id);
        }
        
        public string getSCORMCompletionStatus(string sid, int usr_id, int ref_id) {
            return base.Channel.getSCORMCompletionStatus(sid, usr_id, ref_id);
        }
        
        public System.Threading.Tasks.Task<string> getSCORMCompletionStatusAsync(string sid, int usr_id, int ref_id) {
            return base.Channel.getSCORMCompletionStatusAsync(sid, usr_id, ref_id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WPF_ILIAS_Sync2Folder.IliasSoapWebservice.copyObjectResponse WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ILIASSoapWebservicePortType.copyObject(WPF_ILIAS_Sync2Folder.IliasSoapWebservice.copyObjectRequest request) {
            return base.Channel.copyObject(request);
        }
        
        public int copyObject(string sid, string xml) {
            WPF_ILIAS_Sync2Folder.IliasSoapWebservice.copyObjectRequest inValue = new WPF_ILIAS_Sync2Folder.IliasSoapWebservice.copyObjectRequest();
            inValue.sid = sid;
            inValue.xml = xml;
            WPF_ILIAS_Sync2Folder.IliasSoapWebservice.copyObjectResponse retVal = ((WPF_ILIAS_Sync2Folder.IliasSoapWebservice.ILIASSoapWebservicePortType)(this)).copyObject(inValue);
            return retVal.xml;
        }
        
        public System.Threading.Tasks.Task<WPF_ILIAS_Sync2Folder.IliasSoapWebservice.copyObjectResponse> copyObjectAsync(WPF_ILIAS_Sync2Folder.IliasSoapWebservice.copyObjectRequest request) {
            return base.Channel.copyObjectAsync(request);
        }
        
        public bool moveObject(string sid, int ref_id, int target_id) {
            return base.Channel.moveObject(sid, ref_id, target_id);
        }
        
        public System.Threading.Tasks.Task<bool> moveObjectAsync(string sid, int ref_id, int target_id) {
            return base.Channel.moveObjectAsync(sid, ref_id, target_id);
        }
        
        public string getTestResults(string sid, int ref_id, bool sum_only) {
            return base.Channel.getTestResults(sid, ref_id, sum_only);
        }
        
        public System.Threading.Tasks.Task<string> getTestResultsAsync(string sid, int ref_id, bool sum_only) {
            return base.Channel.getTestResultsAsync(sid, ref_id, sum_only);
        }
        
        public bool removeTestResults(string sid, int ref_id, int[] user_ids) {
            return base.Channel.removeTestResults(sid, ref_id, user_ids);
        }
        
        public System.Threading.Tasks.Task<bool> removeTestResultsAsync(string sid, int ref_id, int[] user_ids) {
            return base.Channel.removeTestResultsAsync(sid, ref_id, user_ids);
        }
        
        public string getCoursesForUser(string sid, string parameters) {
            return base.Channel.getCoursesForUser(sid, parameters);
        }
        
        public System.Threading.Tasks.Task<string> getCoursesForUserAsync(string sid, string parameters) {
            return base.Channel.getCoursesForUserAsync(sid, parameters);
        }
        
        public string getGroupsForUser(string sid, string parameters) {
            return base.Channel.getGroupsForUser(sid, parameters);
        }
        
        public System.Threading.Tasks.Task<string> getGroupsForUserAsync(string sid, string parameters) {
            return base.Channel.getGroupsForUserAsync(sid, parameters);
        }
        
        public string getPathForRefId(string sid, int ref_id) {
            return base.Channel.getPathForRefId(sid, ref_id);
        }
        
        public System.Threading.Tasks.Task<string> getPathForRefIdAsync(string sid, int ref_id) {
            return base.Channel.getPathForRefIdAsync(sid, ref_id);
        }
        
        public string searchRoles(string sid, string key, string combination, string role_type) {
            return base.Channel.searchRoles(sid, key, combination, role_type);
        }
        
        public System.Threading.Tasks.Task<string> searchRolesAsync(string sid, string key, string combination, string role_type) {
            return base.Channel.searchRolesAsync(sid, key, combination, role_type);
        }
        
        public string getInstallationInfoXML() {
            return base.Channel.getInstallationInfoXML();
        }
        
        public System.Threading.Tasks.Task<string> getInstallationInfoXMLAsync() {
            return base.Channel.getInstallationInfoXMLAsync();
        }
        
        public string getClientInfoXML(string clientid) {
            return base.Channel.getClientInfoXML(clientid);
        }
        
        public System.Threading.Tasks.Task<string> getClientInfoXMLAsync(string clientid) {
            return base.Channel.getClientInfoXMLAsync(clientid);
        }
        
        public string getSkillCompletionDateForTriggerRefId(string sid, string user_id, string ref_id) {
            return base.Channel.getSkillCompletionDateForTriggerRefId(sid, user_id, ref_id);
        }
        
        public System.Threading.Tasks.Task<string> getSkillCompletionDateForTriggerRefIdAsync(string sid, string user_id, string ref_id) {
            return base.Channel.getSkillCompletionDateForTriggerRefIdAsync(sid, user_id, ref_id);
        }
        
        public string checkSkillUserCertificateForTriggerRefId(string sid, string user_id, string ref_id) {
            return base.Channel.checkSkillUserCertificateForTriggerRefId(sid, user_id, ref_id);
        }
        
        public System.Threading.Tasks.Task<string> checkSkillUserCertificateForTriggerRefIdAsync(string sid, string user_id, string ref_id) {
            return base.Channel.checkSkillUserCertificateForTriggerRefIdAsync(sid, user_id, ref_id);
        }
        
        public string getSkillTriggerOfAllCertificates(string sid, string user_id) {
            return base.Channel.getSkillTriggerOfAllCertificates(sid, user_id);
        }
        
        public System.Threading.Tasks.Task<string> getSkillTriggerOfAllCertificatesAsync(string sid, string user_id) {
            return base.Channel.getSkillTriggerOfAllCertificatesAsync(sid, user_id);
        }
        
        public int getUserIdBySid(string sid) {
            return base.Channel.getUserIdBySid(sid);
        }
        
        public System.Threading.Tasks.Task<int> getUserIdBySidAsync(string sid) {
            return base.Channel.getUserIdBySidAsync(sid);
        }
        
        public bool deleteExpiredDualOptInUserObjects(string sid, int usr_id) {
            return base.Channel.deleteExpiredDualOptInUserObjects(sid, usr_id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteExpiredDualOptInUserObjectsAsync(string sid, int usr_id) {
            return base.Channel.deleteExpiredDualOptInUserObjectsAsync(sid, usr_id);
        }
        
        public string readWebLink(string sid, int ref_id) {
            return base.Channel.readWebLink(sid, ref_id);
        }
        
        public System.Threading.Tasks.Task<string> readWebLinkAsync(string sid, int ref_id) {
            return base.Channel.readWebLinkAsync(sid, ref_id);
        }
        
        public int createWebLink(string sid, int target_id, string xml) {
            return base.Channel.createWebLink(sid, target_id, xml);
        }
        
        public System.Threading.Tasks.Task<int> createWebLinkAsync(string sid, int target_id, string xml) {
            return base.Channel.createWebLinkAsync(sid, target_id, xml);
        }
        
        public bool updateWebLink(string sid, int ref_id, string xml) {
            return base.Channel.updateWebLink(sid, ref_id, xml);
        }
        
        public System.Threading.Tasks.Task<bool> updateWebLinkAsync(string sid, int ref_id, string xml) {
            return base.Channel.updateWebLinkAsync(sid, ref_id, xml);
        }
        
        public string getLearningProgressChanges(string sid, string timestamp, bool include_ref_ids, string[] type_filter) {
            return base.Channel.getLearningProgressChanges(sid, timestamp, include_ref_ids, type_filter);
        }
        
        public System.Threading.Tasks.Task<string> getLearningProgressChangesAsync(string sid, string timestamp, bool include_ref_ids, string[] type_filter) {
            return base.Channel.getLearningProgressChangesAsync(sid, timestamp, include_ref_ids, type_filter);
        }
        
        public bool deleteProgress(string sid, int[] ref_ids, int[] usr_ids, string[] type_filter, int[] progress_filter) {
            return base.Channel.deleteProgress(sid, ref_ids, usr_ids, type_filter, progress_filter);
        }
        
        public System.Threading.Tasks.Task<bool> deleteProgressAsync(string sid, int[] ref_ids, int[] usr_ids, string[] type_filter, int[] progress_filter) {
            return base.Channel.deleteProgressAsync(sid, ref_ids, usr_ids, type_filter, progress_filter);
        }
        
        public string getProgressInfo(string sid, int ref_id, int[] progress_filter) {
            return base.Channel.getProgressInfo(sid, ref_id, progress_filter);
        }
        
        public System.Threading.Tasks.Task<string> getProgressInfoAsync(string sid, int ref_id, int[] progress_filter) {
            return base.Channel.getProgressInfoAsync(sid, ref_id, progress_filter);
        }
        
        public string exportDataCollectionContent(string sid, int ref_id, int table_id, string format, string filepath) {
            return base.Channel.exportDataCollectionContent(sid, ref_id, table_id, format, filepath);
        }
        
        public System.Threading.Tasks.Task<string> exportDataCollectionContentAsync(string sid, int ref_id, int table_id, string format, string filepath) {
            return base.Channel.exportDataCollectionContentAsync(sid, ref_id, table_id, format, filepath);
        }
        
        public bool processBackgroundTask(string sid, int task_id) {
            return base.Channel.processBackgroundTask(sid, task_id);
        }
        
        public System.Threading.Tasks.Task<bool> processBackgroundTaskAsync(string sid, int task_id) {
            return base.Channel.processBackgroundTaskAsync(sid, task_id);
        }
    }
}
